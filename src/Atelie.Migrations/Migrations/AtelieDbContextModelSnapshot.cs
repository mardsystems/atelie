// <auto-generated />
using System;
using Atelie;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Atelie.Migrations
{
    [DbContext(typeof(AtelieDbContext))]
    partial class AtelieDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Atelie.Cadastro.Cores.CorInterna", b =>
                {
                    b.Property<string>("Codigo")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao");

                    b.Property<string>("Nome");

                    b.Property<string>("RGB");

                    b.HasKey("Codigo");

                    b.ToTable("CoresInternas");
                });

            modelBuilder.Entity("Atelie.Cadastro.Materiais.Componentes.Componente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ComponentePaiId");

                    b.Property<string>("CreateBy");

                    b.Property<DateTime>("CreateOn");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<string>("Nome");

                    b.Property<string>("UnidadePadraoSigla");

                    b.Property<byte[]>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ComponentePaiId");

                    b.HasIndex("UnidadePadraoSigla");

                    b.ToTable("Componentes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Botão",
                            UnidadePadraoSigla = "unid"
                        },
                        new
                        {
                            Id = 2,
                            ComponentePaiId = 1,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Botão com casa",
                            UnidadePadraoSigla = "unid"
                        },
                        new
                        {
                            Id = 3,
                            ComponentePaiId = 1,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Botão de pressão",
                            UnidadePadraoSigla = "unid"
                        },
                        new
                        {
                            Id = 4,
                            ComponentePaiId = 3,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Botão de pressão grande",
                            UnidadePadraoSigla = "unid"
                        },
                        new
                        {
                            Id = 5,
                            ComponentePaiId = 3,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Botão de pressão pequeno",
                            UnidadePadraoSigla = "unid"
                        },
                        new
                        {
                            Id = 6,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Cordão",
                            UnidadePadraoSigla = "m"
                        },
                        new
                        {
                            Id = 7,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Cordinha",
                            UnidadePadraoSigla = "m"
                        },
                        new
                        {
                            Id = 8,
                            ComponentePaiId = 7,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Cordinha para o tag",
                            UnidadePadraoSigla = "m"
                        },
                        new
                        {
                            Id = 9,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Elástico",
                            UnidadePadraoSigla = "m"
                        },
                        new
                        {
                            Id = 10,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Entretela",
                            UnidadePadraoSigla = "unid"
                        },
                        new
                        {
                            Id = 11,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Etiqueta",
                            UnidadePadraoSigla = "unid"
                        },
                        new
                        {
                            Id = 12,
                            ComponentePaiId = 11,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Etiqueta bordada",
                            UnidadePadraoSigla = "unid"
                        },
                        new
                        {
                            Id = 13,
                            ComponentePaiId = 11,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Etiqueta de composição",
                            UnidadePadraoSigla = "unid"
                        },
                        new
                        {
                            Id = 14,
                            ComponentePaiId = 11,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Etiqueta de tamanho",
                            UnidadePadraoSigla = "unid"
                        },
                        new
                        {
                            Id = 15,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Fio",
                            UnidadePadraoSigla = "m"
                        },
                        new
                        {
                            Id = 16,
                            ComponentePaiId = 15,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Fio para overlock",
                            UnidadePadraoSigla = "m"
                        },
                        new
                        {
                            Id = 17,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Ilhós",
                            UnidadePadraoSigla = "unid"
                        },
                        new
                        {
                            Id = 18,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Linha",
                            UnidadePadraoSigla = "m"
                        },
                        new
                        {
                            Id = 19,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Papel",
                            UnidadePadraoSigla = "m"
                        },
                        new
                        {
                            Id = 20,
                            ComponentePaiId = 19,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Papel de embrulho",
                            UnidadePadraoSigla = "m"
                        },
                        new
                        {
                            Id = 21,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Plástico",
                            UnidadePadraoSigla = "unid"
                        },
                        new
                        {
                            Id = 22,
                            ComponentePaiId = 21,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Sacola plástica",
                            UnidadePadraoSigla = "unid"
                        },
                        new
                        {
                            Id = 23,
                            ComponentePaiId = 21,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Sacos plástica",
                            UnidadePadraoSigla = "unid"
                        },
                        new
                        {
                            Id = 24,
                            ComponentePaiId = 21,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Bobinas plásticas",
                            UnidadePadraoSigla = "unid"
                        },
                        new
                        {
                            Id = 25,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Tag",
                            UnidadePadraoSigla = "unid"
                        },
                        new
                        {
                            Id = 26,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Tecido",
                            UnidadePadraoSigla = "m"
                        },
                        new
                        {
                            Id = 27,
                            ComponentePaiId = 26,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Tecido (brim)",
                            UnidadePadraoSigla = "m"
                        },
                        new
                        {
                            Id = 28,
                            ComponentePaiId = 26,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Tecido (cupro)",
                            UnidadePadraoSigla = "m"
                        },
                        new
                        {
                            Id = 29,
                            ComponentePaiId = 26,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Tecido (seda)",
                            UnidadePadraoSigla = "m"
                        },
                        new
                        {
                            Id = 30,
                            ComponentePaiId = 26,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Tecido (seda lavada)",
                            UnidadePadraoSigla = "m"
                        },
                        new
                        {
                            Id = 31,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Viés",
                            UnidadePadraoSigla = "unid"
                        },
                        new
                        {
                            Id = 32,
                            ComponentePaiId = 31,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Viés para cordão",
                            UnidadePadraoSigla = "unid"
                        },
                        new
                        {
                            Id = 33,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Ziper",
                            UnidadePadraoSigla = "unid"
                        });
                });

            modelBuilder.Entity("Atelie.Cadastro.Materiais.Fabricantes.Catalogo", b =>
                {
                    b.Property<int>("FabricanteId");

                    b.Property<int>("ComponenteId");

                    b.Property<string>("Nome");

                    b.Property<string>("Site");

                    b.HasKey("FabricanteId", "ComponenteId", "Nome");

                    b.ToTable("Catalogo");

                    b.HasData(
                        new
                        {
                            FabricanteId = 10,
                            ComponenteId = 18,
                            Nome = "Xik poliéster",
                            Site = "http://setta.com.br/produto/xik-poliester"
                        },
                        new
                        {
                            FabricanteId = 16,
                            ComponenteId = 22,
                            Nome = "Sacos com aba - PEDB (polietileno de baixa densidade)",
                            Site = "http://helioplast.com.br/produtos/sacos-plasticos/com-aba"
                        },
                        new
                        {
                            FabricanteId = 16,
                            ComponenteId = 22,
                            Nome = "Sacos com aba - PEAD (polietileno de alta densidade)",
                            Site = "http://helioplast.com.br/produtos/sacos-plasticos/com-aba"
                        },
                        new
                        {
                            FabricanteId = 16,
                            ComponenteId = 22,
                            Nome = "Sacos com aba - PP (polipropileno)",
                            Site = "http://helioplast.com.br/produtos/sacos-plasticos/com-aba"
                        },
                        new
                        {
                            FabricanteId = 16,
                            ComponenteId = 22,
                            Nome = "Sacos com aba - BOPP (polipropileno bi orientado)",
                            Site = "http://helioplast.com.br/produtos/sacos-plasticos/com-aba"
                        },
                        new
                        {
                            FabricanteId = 17,
                            ComponenteId = 22,
                            Nome = "Plástico fosco transparente (alta densidade) medindo 46 x 60 x 18 com alça especial"
                        },
                        new
                        {
                            FabricanteId = 17,
                            ComponenteId = 22,
                            Nome = "Sacola em plástico bolha transparente com alça de mão branca",
                            Site = "https://www.publicoalvoembalagens.com.br/produtos/sacola-em-plastico-bolha-transparente-com-alca-de-mao-branca-/133"
                        });
                });

            modelBuilder.Entity("Atelie.Cadastro.Materiais.Fabricantes.CorDeFabricante", b =>
                {
                    b.Property<int>("FabricanteId");

                    b.Property<int>("ComponenteId");

                    b.Property<string>("CatalogoNome");

                    b.Property<string>("Codigo");

                    b.Property<string>("Categoria");

                    b.Property<string>("CorDeUsoInternoCodigo");

                    b.Property<decimal?>("CustoPadrao")
                        .HasColumnType("DECIMAL (18, 2)");

                    b.Property<string>("Descricao");

                    b.Property<string>("Localizacao");

                    b.Property<string>("Nome");

                    b.Property<string>("RGB");

                    b.HasKey("FabricanteId", "ComponenteId", "CatalogoNome", "Codigo");

                    b.HasIndex("CorDeUsoInternoCodigo");

                    b.ToTable("CorDeFabricante");

                    b.HasData(
                        new
                        {
                            FabricanteId = 10,
                            ComponenteId = 18,
                            CatalogoNome = "Xik poliéster",
                            Codigo = "0011",
                            Nome = "Preto"
                        },
                        new
                        {
                            FabricanteId = 10,
                            ComponenteId = 18,
                            CatalogoNome = "Xik poliéster",
                            Codigo = "0012",
                            Nome = "Marinho Forte"
                        },
                        new
                        {
                            FabricanteId = 10,
                            ComponenteId = 18,
                            CatalogoNome = "Xik poliéster",
                            Codigo = "0421",
                            Nome = "Fuzil"
                        },
                        new
                        {
                            FabricanteId = 10,
                            ComponenteId = 18,
                            CatalogoNome = "Xik poliéster",
                            Codigo = "0428",
                            Nome = "Fox"
                        });
                });

            modelBuilder.Entity("Atelie.Cadastro.Materiais.Fabricantes.DisponibilidadeDeEmbalagem", b =>
                {
                    b.Property<int>("FabricanteId");

                    b.Property<int>("ComponenteId");

                    b.Property<string>("CatalogoNome");

                    b.Property<string>("EmbalagemNome");

                    b.Property<int?>("CatalogoComponenteId");

                    b.Property<int?>("CatalogoFabricanteId");

                    b.Property<string>("CatalogoNome1");

                    b.HasKey("FabricanteId", "ComponenteId", "CatalogoNome", "EmbalagemNome");

                    b.HasIndex("CatalogoFabricanteId", "CatalogoComponenteId", "CatalogoNome1");

                    b.ToTable("DisponibilidadeDeEmbalagem");
                });

            modelBuilder.Entity("Atelie.Cadastro.Materiais.Fabricantes.FabricacaoDeComponente", b =>
                {
                    b.Property<int>("FabricanteId");

                    b.Property<int>("ComponenteId");

                    b.HasKey("FabricanteId", "ComponenteId");

                    b.HasIndex("ComponenteId");

                    b.ToTable("FabricacoesDeComponentes");

                    b.HasData(
                        new
                        {
                            FabricanteId = 9,
                            ComponenteId = 18
                        },
                        new
                        {
                            FabricanteId = 10,
                            ComponenteId = 18
                        },
                        new
                        {
                            FabricanteId = 16,
                            ComponenteId = 22
                        },
                        new
                        {
                            FabricanteId = 16,
                            ComponenteId = 23
                        },
                        new
                        {
                            FabricanteId = 16,
                            ComponenteId = 24
                        },
                        new
                        {
                            FabricanteId = 17,
                            ComponenteId = 22
                        });
                });

            modelBuilder.Entity("Atelie.Cadastro.Materiais.Fabricantes.Fabricante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Marca");

                    b.Property<string>("Nome");

                    b.Property<string>("Site");

                    b.HasKey("Id");

                    b.ToTable("Fabricantes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Marca = "Genérica",
                            Nome = "Genérico"
                        },
                        new
                        {
                            Id = 2,
                            Marca = "Baxmann",
                            Nome = "Baxmann",
                            Site = "https://www.baxmann.com.br"
                        },
                        new
                        {
                            Id = 3,
                            Marca = "Coats",
                            Nome = "Coats",
                            Site = "http://www.coatscorrente.com.br"
                        },
                        new
                        {
                            Id = 4,
                            Marca = "Cordex",
                            Nome = "Cordex",
                            Site = "https://www.cordex.com.br"
                        },
                        new
                        {
                            Id = 5,
                            Marca = "Eberler",
                            Nome = "Eberler Fashion",
                            Site = "http://www.eberlefashion.com.br"
                        },
                        new
                        {
                            Id = 6,
                            Marca = "Helvetia",
                            Nome = "Helvetia",
                            Site = "https://www.helvetia.com.br"
                        },
                        new
                        {
                            Id = 7,
                            Marca = "Picardie",
                            Nome = "Lainière de Picardie",
                            Site = "http://www.lainieredepicardie.com.br"
                        },
                        new
                        {
                            Id = 8,
                            Marca = "Lamar",
                            Nome = "Lamar Etiquetas",
                            Site = "http://www.etiquetaslamar.com.br"
                        },
                        new
                        {
                            Id = 9,
                            Marca = "Bonfio",
                            Nome = "Linhas Bonfio",
                            Site = "http://www.bonfio.com.br"
                        },
                        new
                        {
                            Id = 10,
                            Marca = "Setta",
                            Nome = "Linhas Setta",
                            Site = "http://www.setta.com.br"
                        },
                        new
                        {
                            Id = 11,
                            Marca = "RenauxView",
                            Nome = "RenauxView",
                            Site = "https://renauxview.com.br"
                        },
                        new
                        {
                            Id = 12,
                            Marca = "Speedpel",
                            Nome = "Speedpel",
                            Site = "http://www.speedpel.com.br"
                        },
                        new
                        {
                            Id = 13,
                            Marca = "Tekla",
                            Nome = "Tekla",
                            Site = "http://www.tekla.com.br"
                        },
                        new
                        {
                            Id = 14,
                            Marca = "Werner",
                            Nome = "Werner",
                            Site = "https://wernertecidos.com.br"
                        },
                        new
                        {
                            Id = 15,
                            Marca = "YKK",
                            Nome = "YKK",
                            Site = "https://www.ykkfastening.com"
                        },
                        new
                        {
                            Id = 16,
                            Marca = "Helioplast",
                            Nome = "Helioplast",
                            Site = "http://helioplast.com.br"
                        },
                        new
                        {
                            Id = 17,
                            Marca = "Público Alvo",
                            Nome = "Público Alvo Embalagens",
                            Site = "https://www.publicoalvoembalagens.com.br"
                        });
                });

            modelBuilder.Entity("Atelie.Cadastro.Materiais.Fornecedores.DisponibilidadeDeMeioDePagamento", b =>
                {
                    b.Property<int>("FornecedorId");

                    b.Property<int>("MeioDePagamentoId");

                    b.HasKey("FornecedorId", "MeioDePagamentoId");

                    b.HasIndex("MeioDePagamentoId");

                    b.ToTable("DisponibilidadesDeMeiosDePagamento");
                });

            modelBuilder.Entity("Atelie.Cadastro.Materiais.Fornecedores.FornecimentoDeMaterial", b =>
                {
                    b.Property<int>("FornecedorId");

                    b.Property<int>("MaterialId");

                    b.Property<string>("CorCatalogoNome");

                    b.Property<string>("CorCodigo");

                    b.Property<int?>("CorComponenteId");

                    b.Property<int?>("CorFabricanteId");

                    b.Property<string>("NomeComercial");

                    b.Property<decimal?>("UltimoPreco")
                        .HasColumnType("DECIMAL (18, 2)");

                    b.HasKey("FornecedorId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("CorFabricanteId", "CorComponenteId", "CorCatalogoNome", "CorCodigo");

                    b.ToTable("FornecimentosDeMateriais");
                });

            modelBuilder.Entity("Atelie.Cadastro.Materiais.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComponenteId");

                    b.Property<string>("CreateBy");

                    b.Property<DateTime>("CreateOn");

                    b.Property<decimal?>("CustoPadrao")
                        .HasColumnType("DECIMAL (18, 2)");

                    b.Property<string>("Descricao");

                    b.Property<int>("FabricanteId");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime>("ModifiedOn");

                    b.Property<string>("Nome");

                    b.Property<byte[]>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ComponenteId");

                    b.HasIndex("FabricanteId");

                    b.ToTable("Materiais");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ComponenteId = 18,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FabricanteId = 10,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Linha Xik Poliester 2000J N. 120"
                        },
                        new
                        {
                            Id = 2,
                            ComponenteId = 18,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FabricanteId = 10,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Linha Xik Poliester 5000J N. 120"
                        },
                        new
                        {
                            Id = 3,
                            ComponenteId = 10,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FabricanteId = 7,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Entretela 2805/325 da marca Lainière, 1,50cmX25cm"
                        },
                        new
                        {
                            Id = 4,
                            ComponenteId = 16,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FabricanteId = 9,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Fio da marca Bonfio 300g"
                        },
                        new
                        {
                            Id = 5,
                            ComponenteId = 16,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FabricanteId = 3,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Fio Soltex 300g da marca Coats Corrente"
                        },
                        new
                        {
                            Id = 6,
                            ComponenteId = 24,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FabricanteId = 14,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Tecido artigo 1198/6"
                        },
                        new
                        {
                            Id = 7,
                            ComponenteId = 24,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FabricanteId = 14,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Tecido artigo 1198/6 com defeito"
                        },
                        new
                        {
                            Id = 8,
                            ComponenteId = 22,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "São entregues em pacotes de papel craft com quantidades programadas pelos clientes ou em caixas de papelão (sob consulta).",
                            FabricanteId = 16,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Sacos com aba - PEAD (polietileno de alta densidade)"
                        },
                        new
                        {
                            Id = 9,
                            ComponenteId = 22,
                            CreateOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FabricanteId = 17,
                            ModifiedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nome = "Plástico fosco transparente (alta densidade) medindo 46 x 60 x 18 com alça especial"
                        });
                });

            modelBuilder.Entity("Atelie.Comum.Comercial.MeioDePagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("MeioDePagamento");
                });

            modelBuilder.Entity("Atelie.Comum.Pessoa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Pessoas");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Pessoa");
                });

            modelBuilder.Entity("Atelie.Comum.Unidade", b =>
                {
                    b.Property<string>("Sigla")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("NomeNoPlural");

                    b.Property<string>("NomeNoSingular");

                    b.HasKey("Sigla");

                    b.ToTable("Unidades");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Unidade");
                });

            modelBuilder.Entity("Atelie.Cadastro.Materiais.Fornecedores.Fornecedor", b =>
                {
                    b.HasBaseType("Atelie.Comum.Pessoa");

                    b.Property<string>("CNPJ");

                    b.Property<string>("Site");

                    b.HasDiscriminator().HasValue("Fornecedor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Werner",
                            Site = "https://wernertecidos.com.br"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Armarinhos 25",
                            Site = "https://www.armarinhos25.com.br"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Casa Ferro",
                            Site = "https://www.armarinhos25.com.br"
                        },
                        new
                        {
                            Id = 4,
                            Nome = "Helvetia",
                            Site = "https://www.helvetia.com.br"
                        },
                        new
                        {
                            Id = 5,
                            Nome = "Lamar Etiquetas",
                            Site = "http://www.etiquetaslamar.com.br"
                        },
                        new
                        {
                            Id = 6,
                            Nome = "Motta Carvalho"
                        },
                        new
                        {
                            Id = 7,
                            Nome = "Amsterdam"
                        },
                        new
                        {
                            Id = 8,
                            Nome = "Caçula de São Cristovão"
                        },
                        new
                        {
                            Id = 9,
                            Nome = "Helioplast",
                            Site = "http://helioplast.com.br"
                        },
                        new
                        {
                            Id = 10,
                            Nome = "Público Alvo",
                            Site = "https://www.publicoalvoembalagens.com.br"
                        },
                        new
                        {
                            Id = 11,
                            Nome = "Speedpel",
                            Site = "http://www.speedpel.com.br"
                        },
                        new
                        {
                            Id = 12,
                            Nome = "Oeste Aviamentos",
                            Site = "https://www.oesteaviamentos.com"
                        });
                });

            modelBuilder.Entity("Atelie.Cadastro.Unidades.UnidadeDeMedida", b =>
                {
                    b.HasBaseType("Atelie.Comum.Unidade");

                    b.HasDiscriminator().HasValue("UnidadeDeMedida");

                    b.HasData(
                        new
                        {
                            Sigla = "unid",
                            NomeNoPlural = "Unidades",
                            NomeNoSingular = "Unidade"
                        },
                        new
                        {
                            Sigla = "m",
                            NomeNoPlural = "Metros",
                            NomeNoSingular = "Metro"
                        },
                        new
                        {
                            Sigla = "J",
                            NomeNoPlural = "Jardas",
                            NomeNoSingular = "Jarda"
                        },
                        new
                        {
                            Sigla = "cm",
                            NomeNoPlural = "Centímetros",
                            NomeNoSingular = "Centímetro"
                        },
                        new
                        {
                            Sigla = "cx",
                            NomeNoPlural = "Caixas",
                            NomeNoSingular = "Caixa"
                        },
                        new
                        {
                            Sigla = "cn",
                            NomeNoPlural = "Cones",
                            NomeNoSingular = "Cone"
                        },
                        new
                        {
                            Sigla = "nv",
                            NomeNoPlural = "Novelos",
                            NomeNoSingular = "Novelo"
                        },
                        new
                        {
                            Sigla = "pc",
                            NomeNoPlural = "Pacotes",
                            NomeNoSingular = "Pacote"
                        },
                        new
                        {
                            Sigla = "bb",
                            NomeNoPlural = "Bobinas",
                            NomeNoSingular = "Bobina"
                        });
                });

            modelBuilder.Entity("Atelie.Cadastro.Materiais.Componentes.Componente", b =>
                {
                    b.HasOne("Atelie.Cadastro.Materiais.Componentes.Componente", "ComponentePai")
                        .WithMany()
                        .HasForeignKey("ComponentePaiId");

                    b.HasOne("Atelie.Cadastro.Unidades.UnidadeDeMedida", "UnidadePadrao")
                        .WithMany()
                        .HasForeignKey("UnidadePadraoSigla");
                });

            modelBuilder.Entity("Atelie.Cadastro.Materiais.Fabricantes.Catalogo", b =>
                {
                    b.HasOne("Atelie.Cadastro.Materiais.Fabricantes.FabricacaoDeComponente", "FabricacaoDeComponente")
                        .WithMany("Catalogos")
                        .HasForeignKey("FabricanteId", "ComponenteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Atelie.Cadastro.Materiais.Fabricantes.CorDeFabricante", b =>
                {
                    b.HasOne("Atelie.Cadastro.Cores.CorInterna", "CorDeUsoInterno")
                        .WithMany()
                        .HasForeignKey("CorDeUsoInternoCodigo");

                    b.HasOne("Atelie.Cadastro.Materiais.Fabricantes.Catalogo", "Catalogo")
                        .WithMany("Cores")
                        .HasForeignKey("FabricanteId", "ComponenteId", "CatalogoNome")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Atelie.Cadastro.Materiais.Fabricantes.DisponibilidadeDeEmbalagem", b =>
                {
                    b.HasOne("Atelie.Cadastro.Materiais.Fabricantes.Catalogo", "Catalogo")
                        .WithMany("Embalagens")
                        .HasForeignKey("CatalogoFabricanteId", "CatalogoComponenteId", "CatalogoNome1");

                    b.OwnsOne("Atelie.Cadastro.Materiais.Fabricantes.Embalagem", "Embalagem", b1 =>
                        {
                            b1.Property<int>("DisponibilidadeDeEmbalagemFabricanteId");

                            b1.Property<int>("DisponibilidadeDeEmbalagemComponenteId");

                            b1.Property<string>("DisponibilidadeDeEmbalagemCatalogoNome");

                            b1.Property<string>("DisponibilidadeDeEmbalagemEmbalagemNome");

                            b1.Property<string>("UnidadeBaseSigla");

                            b1.Property<string>("UnidadeSigla");

                            b1.Property<double>("Valor");

                            b1.HasKey("DisponibilidadeDeEmbalagemFabricanteId", "DisponibilidadeDeEmbalagemComponenteId", "DisponibilidadeDeEmbalagemCatalogoNome", "DisponibilidadeDeEmbalagemEmbalagemNome");

                            b1.HasIndex("UnidadeBaseSigla");

                            b1.HasIndex("UnidadeSigla");

                            b1.ToTable("DisponibilidadeDeEmbalagem");

                            b1.HasOne("Atelie.Comum.Unidade", "UnidadeBase")
                                .WithMany()
                                .HasForeignKey("UnidadeBaseSigla");

                            b1.HasOne("Atelie.Comum.Unidade", "Unidade")
                                .WithMany()
                                .HasForeignKey("UnidadeSigla");

                            b1.HasOne("Atelie.Cadastro.Materiais.Fabricantes.DisponibilidadeDeEmbalagem")
                                .WithOne("Embalagem")
                                .HasForeignKey("Atelie.Cadastro.Materiais.Fabricantes.Embalagem", "DisponibilidadeDeEmbalagemFabricanteId", "DisponibilidadeDeEmbalagemComponenteId", "DisponibilidadeDeEmbalagemCatalogoNome", "DisponibilidadeDeEmbalagemEmbalagemNome")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Atelie.Cadastro.Materiais.Fabricantes.FabricacaoDeComponente", b =>
                {
                    b.HasOne("Atelie.Cadastro.Materiais.Componentes.Componente", "Componente")
                        .WithMany("Fabricantes")
                        .HasForeignKey("ComponenteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Atelie.Cadastro.Materiais.Fabricantes.Fabricante", "Fabricante")
                        .WithMany("ComponentesFabricados")
                        .HasForeignKey("FabricanteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Atelie.Cadastro.Materiais.Fornecedores.DisponibilidadeDeMeioDePagamento", b =>
                {
                    b.HasOne("Atelie.Cadastro.Materiais.Fornecedores.Fornecedor", "Fornecedor")
                        .WithMany("MeiosDePagamento")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Atelie.Comum.Comercial.MeioDePagamento", "MeioDePagamento")
                        .WithMany()
                        .HasForeignKey("MeioDePagamentoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Atelie.Cadastro.Materiais.Fornecedores.FornecimentoDeMaterial", b =>
                {
                    b.HasOne("Atelie.Cadastro.Materiais.Fornecedores.Fornecedor", "Fornecedor")
                        .WithMany("MateriaisFornecidos")
                        .HasForeignKey("FornecedorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Atelie.Cadastro.Materiais.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Atelie.Cadastro.Materiais.Fabricantes.CorDeFabricante", "Cor")
                        .WithMany()
                        .HasForeignKey("CorFabricanteId", "CorComponenteId", "CorCatalogoNome", "CorCodigo");

                    b.OwnsOne("Atelie.Cadastro.Unidades.Tamanho", "TamanhoMinimoPorPedido", b1 =>
                        {
                            b1.Property<int>("FornecimentoDeMaterialFornecedorId");

                            b1.Property<int>("FornecimentoDeMaterialMaterialId");

                            b1.Property<double>("Quantidade");

                            b1.Property<string>("UnidadeSigla");

                            b1.HasKey("FornecimentoDeMaterialFornecedorId", "FornecimentoDeMaterialMaterialId");

                            b1.HasIndex("UnidadeSigla");

                            b1.ToTable("FornecimentosDeMateriais");

                            b1.HasOne("Atelie.Comum.Unidade", "Unidade")
                                .WithMany()
                                .HasForeignKey("UnidadeSigla");

                            b1.HasOne("Atelie.Cadastro.Materiais.Fornecedores.FornecimentoDeMaterial")
                                .WithOne("TamanhoMinimoPorPedido")
                                .HasForeignKey("Atelie.Cadastro.Unidades.Tamanho", "FornecimentoDeMaterialFornecedorId", "FornecimentoDeMaterialMaterialId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Atelie.Cadastro.Materiais.Material", b =>
                {
                    b.HasOne("Atelie.Cadastro.Materiais.Componentes.Componente", "Componente")
                        .WithMany()
                        .HasForeignKey("ComponenteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Atelie.Cadastro.Materiais.Fabricantes.Fabricante", "Fabricante")
                        .WithMany()
                        .HasForeignKey("FabricanteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Atelie.Comum.Pessoa", b =>
                {
                    b.OwnsMany("Atelie.Comum.ContatoDeEmail", "ContatosDeEmail", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Nome");

                            b1.Property<int>("PessoaId");

                            b1.Property<bool>("Principal");

                            b1.HasKey("Id");

                            b1.HasIndex("PessoaId");

                            b1.ToTable("ContatoDeEmail");

                            b1.HasOne("Atelie.Comum.Pessoa")
                                .WithMany("ContatosDeEmail")
                                .HasForeignKey("PessoaId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("Atelie.Comum.Email", "Email", b2 =>
                                {
                                    b2.Property<int>("ContatoDeEmailId")
                                        .ValueGeneratedOnAdd()
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("Endereco");

                                    b2.HasKey("ContatoDeEmailId");

                                    b2.ToTable("ContatoDeEmail");

                                    b2.HasOne("Atelie.Comum.ContatoDeEmail")
                                        .WithOne("Email")
                                        .HasForeignKey("Atelie.Comum.Email", "ContatoDeEmailId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });

                    b.OwnsMany("Atelie.Comum.ContatoDeTelefone", "ContatosDeTelefone", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Nome");

                            b1.Property<int>("PessoaId");

                            b1.Property<bool>("Principal");

                            b1.HasKey("Id");

                            b1.HasIndex("PessoaId");

                            b1.ToTable("ContatoDeTelefone");

                            b1.HasOne("Atelie.Comum.Pessoa")
                                .WithMany("ContatosDeTelefone")
                                .HasForeignKey("PessoaId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsOne("Atelie.Comum.Telefone", "Telefone", b2 =>
                                {
                                    b2.Property<int>("ContatoDeTelefoneId")
                                        .ValueGeneratedOnAdd()
                                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                                    b2.Property<string>("DDD");

                                    b2.Property<string>("Numero");

                                    b2.Property<int>("Tipo");

                                    b2.HasKey("ContatoDeTelefoneId");

                                    b2.ToTable("ContatoDeTelefone");

                                    b2.HasOne("Atelie.Comum.ContatoDeTelefone")
                                        .WithOne("Telefone")
                                        .HasForeignKey("Atelie.Comum.Telefone", "ContatoDeTelefoneId")
                                        .OnDelete(DeleteBehavior.Cascade);
                                });
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
