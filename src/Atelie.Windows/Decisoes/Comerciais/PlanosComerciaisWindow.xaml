<Window
        x:Class="Atelie.Decisoes.Comerciais.PlanosComerciaisWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Atelie.Decisoes.Comerciais"
        xmlns:planos="clr-namespace:Atelie.Decisoes.Comerciais;assembly=Atelie.UI"
        xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
        mc:Ignorable="d"
        Title="Planos Comerciais" Height="795" Width="1193" Loaded="Window_Loaded"        
        xml:lang="pt-BR"
    >
    <Window.Resources>
        <ResourceDictionary>
            <CollectionViewSource x:Key="planosComerciaisViewSource" d:DesignSource="{d:DesignInstance {x:Type planos:PlanoComercialViewModel}, CreateList=True}"/>
            <CollectionViewSource x:Key="custosViewSource" Source="{Binding Custos, Source={StaticResource planosComerciaisViewSource}}"/>
            <CollectionViewSource x:Key="itensViewSource" Source="{Binding Itens, Source={StaticResource planosComerciaisViewSource}}"/>
            <local:ConvertItemToIndex x:Key="IndexConverter"/>
        </ResourceDictionary>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <Menu VerticalAlignment="Top" Grid.ColumnSpan="2">
            <MenuItem Header="Registro">
                <MenuItem Header="Novo Plano Comercial ..."/>
                <Separator/>
                <MenuItem Header="Salvar" InputGestureText="Ctrl+S" Click="SaveButton_Click">
                    <MenuItem.Icon>
                        <materialDesign:PackIcon Kind="ContentSave" />
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Header="Fechar"/>
            </MenuItem>
        </Menu>
        <ToolBar VerticalAlignment="Top" Grid.Row="1" Grid.ColumnSpan="2">
            <Button>
                <StackPanel Orientation="Horizontal">
                    <TextBlock Text="Novo Plano Comercial ..."/>
                </StackPanel>
            </Button>
            <Separator/>
            <Button x:Name="saveButton" ToolTip="Salvar" Click="SaveButton_Click">
                <materialDesign:PackIcon Kind="ContentSave" />
            </Button>
        </ToolBar>
        <Grid Grid.Row="2" DataContext="{StaticResource planosComerciaisViewSource}" Margin="0" Grid.ColumnSpan="2">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="3*" />
                <ColumnDefinition Width="5" />
                <ColumnDefinition Width="2*" />
            </Grid.ColumnDefinitions>
            <DataGrid 
                x:Name="planosComerciaisDataGrid"
                ItemsSource="{Binding}"
                EnableRowVirtualization="True"
                AutoGenerateColumns="False"
                SelectionUnit="FullRow"
                Background="{x:Null}"
            >
                <DataGrid.RowHeaderTemplate>
                    <DataTemplate>
                        <TextBlock Text="{Binding Path=., 
                            RelativeSource={RelativeSource AncestorType=DataGridRow},
                            Converter={StaticResource IndexConverter}}"></TextBlock>
                    </DataTemplate>
                </DataGrid.RowHeaderTemplate>
                <!--<DataGrid.RowHeaderStyle>
                    <Style TargetType="{x:Type DataGridRowHeader}">
                        <Setter Property="MinWidth" Value="30"/>
                        <Setter Property="Content" Value="{Binding Converter={StaticResource IndexConverter}}" />
                    </Style>
                </DataGrid.RowHeaderStyle>-->
                <DataGrid.RowValidationRules>
                    <local:PlanoComercialValidationRule ValidationStep="UpdatedValue"/>
                </DataGrid.RowValidationRules>
                <DataGrid.Columns>
                    <!--<DataGridTextColumn x:Name="idColumn" IsReadOnly="True" Header="Id" Binding="{Binding Id}"/>-->
                    <DataGridTextColumn x:Name="nomeColumn" Header="Nome" Width="*" MinWidth="72" Binding="{Binding Nome, ValidatesOnExceptions=True}"/>
                    <DataGridTextColumn x:Name="rendaBrutaMensalColumn" Header="RBM (R$)" Width="72" Binding="{Binding RendaBrutaMensal, StringFormat={}{0:n2}}" CellStyle="{StaticResource RightStyle}"/>
                    <DataGridTextColumn x:Name="custoFixoTotalColumn" Header="CF (R$)" Width="72" Binding="{Binding CustoFixoTotal, StringFormat={}{0:n2}, Mode=OneWay}" CellStyle="{StaticResource RightStyle}"/>
                    <DataGridTextColumn x:Name="custoFixoPercentualTotalColumn" Header="CF (%)" Width="72" Binding="{Binding CustoFixoPercentualTotal, Mode=OneWay, StringFormat={}{0:n2}}" CellStyle="{StaticResource RightStyle}"/>
                    <DataGridTextColumn x:Name="custoVariavelTotalColumn" Header="CV (R$)" Width="72" Binding="{Binding CustoVariavelTotal, Mode=OneWay, StringFormat={}{0:n2}}" CellStyle="{StaticResource RightStyle}"/>
                    <DataGridTextColumn x:Name="custoVariavelPercentualTotalColumn" Header="CV (%)" Width="72" Binding="{Binding CustoVariavelPercentualTotal, Mode=OneWay, StringFormat={}{0:n2}}" CellStyle="{StaticResource RightStyle}"/>
                    <DataGridTextColumn x:Name="margemColumn" Header="M (R$)" Width="72" Binding="{Binding Margem, StringFormat={}{0:n2}}" CellStyle="{StaticResource RightStyle}"/>
                    <DataGridTextColumn x:Name="margemPercentualColumn" Header="M (%)" Width="72" Binding="{Binding MargemPercentual, StringFormat={}{0:n2}, ValidatesOnNotifyDataErrors=True}" CellStyle="{StaticResource RightStyle}"/>
                    <DataGridTextColumn x:Name="taxaDeMarcacaoColumn" Header="TM" Width="72" Binding="{Binding TaxaDeMarcacao, Mode=OneWay, StringFormat={}{0:n2}, ValidatesOnNotifyDataErrors=True}" CellStyle="{StaticResource RightStyle}"/>
                    <!--<DataGridTextColumn x:Name="stateColumn" IsReadOnly="True" Header="State" Binding="{Binding State}"/>-->
                </DataGrid.Columns>
            </DataGrid>
            <GridSplitter Grid.Column="1" Width="5" HorizontalAlignment="Stretch" />
            <Grid Grid.Column="2" Margin="0" Grid.ColumnSpan="2">
                <Grid.RowDefinitions>
                    <RowDefinition Height="1*" />
                    <RowDefinition Height="5" />
                    <RowDefinition Height="1*" />
                </Grid.RowDefinitions>
                <GroupBox Header="Custos">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <ToolBar VerticalAlignment="Top">
                            <Button x:Name="adicionarCustoButton" Content="Adicionar Custo..." Click="AdicionarModeloButton_Click"/>
                        </ToolBar>
                        <DataGrid
                            Grid.Row="1"
                            x:Name="custosDataGrid"
                            ItemsSource="{Binding Source={StaticResource custosViewSource}}"
                            VerticalContentAlignment="Stretch"
                            HorizontalContentAlignment="Stretch"
                            EnableRowVirtualization="True"
                            AutoGenerateColumns="False"
                            Background="{x:Null}"
                            
                        >
                            <DataGrid.RowHeaderTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Path=., 
                                        RelativeSource={RelativeSource AncestorType=DataGridRow},
                                        Converter={StaticResource IndexConverter}}"></TextBlock>
                                </DataTemplate>
                            </DataGrid.RowHeaderTemplate>
                            <!--<DataGrid.Resources>
                                <Style x:Key="cellStyle" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource {x:Type DataGridCell}}">
                                    <Setter Property="Validation.ErrorTemplate">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <StackPanel>
                                                    <AdornedElementPlaceholder x:Name="placeholder" />
                                                    <Popup HorizontalAlignment="Left" PopupAnimation="Fade" Placement="Bottom" IsOpen="true">
                                                        <Grid Background="White">
                                                            <TextBlock Text="{Binding [0].ErrorContent}"/>
                                                        </Grid>
                                                    </Popup>
                                                </StackPanel>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                                <Style x:Key="errorStyle" TargetType="{x:Type TextBox}">
                                    <Setter Property="Validation.ErrorTemplate">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <StackPanel>
                                                    <AdornedElementPlaceholder x:Name="placeholder" />
                                                    <Popup HorizontalAlignment="Left" PopupAnimation="Fade" Placement="Bottom" IsOpen="true">
                                                        <Grid Background="White">
                                                            <TextBlock Text="{Binding [0].ErrorContent}"/>
                                                        </Grid>
                                                    </Popup>
                                                </StackPanel>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                    -->
                            <!--<Setter Property="Padding" Value="-2"/>
                                        <Style.Triggers>
                                            <Trigger Property="Validation.HasError" Value="True">
                                                <Setter Property="Background" Value="Red"/>
                                                <Setter Property="ToolTip" 
                                                    Value="{Binding RelativeSource={RelativeSource Self},
                                                    Path=(Validation.Errors)[0].ErrorContent.Message}"/>
                                            </Trigger>
                                        </Style.Triggers>-->
                            <!--
                                </Style>
                                <Style x:Key="error2Style" TargetType="{x:Type Label}">
                                    <Setter Property="Padding" Value="-2"/>
                                    <Style.Triggers>
                                        <Trigger Property="Validation.HasError" Value="True">
                                            <Setter Property="Background" Value="Red"/>
                                            <Setter Property="ToolTip" 
                                                Value="{Binding RelativeSource={RelativeSource Self},
                                                Path=(Validation.Errors)[0].ErrorContent}"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                                <Style TargetType="DataGridRow" BasedOn="{StaticResource {x:Type DataGridRow}}">
                                    <Style.Triggers>
                                        -->
                            <!--Order of these triggers matter as the last one will take precedence-->
                            <!--
                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter Property="Background" Value="Transparent" />
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Background" Value="Transparent" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                                -->
                            <!--When the cell is selected, switching to transparent to let the row's Background be visible-->
                            <!--
                                <Style TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}">
                                    <Style.Triggers>
                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter Property="Background" Value="Transparent" />
                                        </Trigger>
                                        -->
                            <!--<Trigger Property="IsSelected" Value="True">
                                            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                            <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                        </Trigger>-->
                            <!--
                                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                                            -->
                            <!--<Setter Property="BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}"/>-->
                            <!--<Setter Property="BorderThickness" Value="1"/>-->
                            <!--
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                                <Style TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource {x:Type DataGridColumnHeader}}">
                                    <Setter Property="FontWeight"  Value="Bold" />
                                    <Setter Property="Background" Value="#FF4472C4" />
                                    <Setter Property="Foreground" Value="White"/>
                                </Style>
                                <ControlTemplate x:Key="rowValidationErrorTemplate">
                                    <Grid Margin="0,-2,0,-2"
                                        ToolTip="{Binding RelativeSource={RelativeSource
                                            FindAncestor, AncestorType={x:Type DataGridRow}},
                                            Path=(Validation.Errors)[0].ErrorContent}">
                                                    <Ellipse StrokeThickness="0" Fill="Red" 
                                            Width="{TemplateBinding FontSize}" 
                                            Height="{TemplateBinding FontSize}" />
                                        <TextBlock Text="!" FontSize="{TemplateBinding FontSize}" 
                                            FontWeight="Bold" Foreground="White" 
                                            HorizontalAlignment="Center" />
                                    </Grid>
                                </ControlTemplate>
                                -->
                            <!--<SolidColorBrush x:Key="alternatingRowBackground" Color="#FFD9E1F2" Opacity="0.5"/>-->
                            <!--
                            </DataGrid.Resources>-->
                            <DataGrid.Columns>
                                <DataGridComboBoxColumn x:Name="tipoColumn" SelectedValueBinding="{Binding Tipo}" Header="Tipo" Width="Auto" MinWidth="72" ItemsSource="{Binding Source={StaticResource TipoDeCusto}}"/>
                                <DataGridTextColumn x:Name="descricaoColumn" Binding="{Binding Descricao}" Header="Descrição" Width="*" MinWidth="72" />
                                <DataGridTextColumn x:Name="valorColumn" Binding="{Binding Valor, StringFormat={}{0:n2}}" Header="V (R$)" Width="72" CellStyle="{StaticResource RightStyle}"/>
                                <DataGridTextColumn x:Name="percentualColumn" Binding="{Binding Percentual, StringFormat={}{0:n2}}" Header="P (%)" Width="72" CellStyle="{StaticResource RightStyle}"/>
                                <DataGridTextColumn x:Name="valorCalculadoColumn" Binding="{Binding ValorCalculado, Mode=OneWay, StringFormat={}{0:n2}}" Header="VC (R$)" Width="72" CellStyle="{StaticResource RightStyle}"/>
                                <DataGridTextColumn x:Name="percentualCalculadoColumn" Binding="{Binding PercentualCalculado, Mode=OneWay, StringFormat={}{0:n2}}" Header="PC (%)" Width="72" CellStyle="{StaticResource RightStyle}"/>
                            </DataGrid.Columns>
                        </DataGrid>
                    </Grid>
                </GroupBox>
                <GridSplitter Grid.Row="1" Height="5" HorizontalAlignment="Stretch" />
                <GroupBox Grid.Row="2" Header="Tabela de Preços">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                        </Grid.RowDefinitions>
                        <ToolBar VerticalAlignment="Top">
                            <Button x:Name="adicionarModeloButton" Content="Adicionar Modelo..." Click="AdicionarModeloButton_Click"/>
                        </ToolBar>
                        <DataGrid
                            Grid.Row="1"
                            x:Name="itensDataGrid"
                            ItemsSource="{Binding Source={StaticResource itensViewSource}}"
                            VerticalContentAlignment="Stretch"
                            HorizontalContentAlignment="Stretch"
                            EnableRowVirtualization="True"
                            AutoGenerateColumns="False"
                            CanUserAddRows="False"
                            Background="{x:Null}"
                        >
                            <DataGrid.RowHeaderTemplate>
                                <DataTemplate>
                                    <TextBlock Text="{Binding Path=., 
                                        RelativeSource={RelativeSource AncestorType=DataGridRow},
                                        Converter={StaticResource IndexConverter}}"></TextBlock>
                                </DataTemplate>
                            </DataGrid.RowHeaderTemplate>
                            <!--<DataGrid.RowDetailsTemplate>
                                <DataTemplate>
                                    <GroupBox Header="Recursos">
                                        <DataGrid
                                            Height="Auto"
                                            ItemsSource="{Binding ElementName=itensDataGrid, Path=SelectedItem.Modelo.Recursos}"
                                            RowDetailsVisibilityMode="VisibleWhenSelected"
                                            VerticalContentAlignment="Stretch"
                                            HorizontalContentAlignment="Stretch"
                                            EnableRowVirtualization="True"
                                            AutoGenerateColumns="False"
                                        >
                                            <DataGrid.Columns>
                                                <DataGridComboBoxColumn Header="Tipo" SelectedValueBinding="{Binding Tipo}" Width="Auto" MinWidth="72" ItemsSource="{Binding Source={StaticResource TipoDeRecurso}, Mode=OneWay}"/>
                                                <DataGridTextColumn Header="Descrição" Binding="{Binding Descricao}" Width="*" MinWidth="72" />
                                                <DataGridTextColumn Header="C (R$)" Binding="{Binding Custo, StringFormat={}{0:n2}}" Width="72" CellStyle="{StaticResource RightStyle}" />
                                                <DataGridTextColumn Header="Unidades" Binding="{Binding Unidades}" Width="40" CellStyle="{StaticResource RightStyle}" />
                                                <DataGridTextColumn Header="C/U (R$)" Binding="{Binding CustoPorUnidade, Mode=OneWay, StringFormat={}{0:n2}}" Width="72" CellStyle="{StaticResource RightStyle}" />
                                            </DataGrid.Columns>
                                        </DataGrid>
                                    </GroupBox>
                                </DataTemplate>
                            </DataGrid.RowDetailsTemplate>-->
                            <DataGrid.Columns>
                                <!--<DataGridTextColumn x:Name="planoComercialIdColumn" Binding="{Binding PlanoComercialId}" Header="PCI" Width="Auto"/>-->
                                <DataGridTextColumn x:Name="custoDeProducaoColumn" Binding="{Binding CustoDeProducao, Mode=OneWay, StringFormat={}{0:n2}}" Header="CP (R$)" Width="72" CellStyle="{StaticResource RightStyle}"/>
                                <DataGridTextColumn x:Name="CustoDeProducaoSugeridoColumn" Binding="{Binding CustoDeProducaoSugerido, Mode=OneWay, StringFormat={}{0:n2}}" Header="CPS (R$)" Width="72" CellStyle="{StaticResource RightStyle}"/>
                                <DataGridTextColumn x:Name="modeloColumn" Binding="{Binding Modelo.Nome, Mode=OneWay, StringFormat={}{0:n2}}" Header="Modelo" Width="*" MinWidth="72"/>
                                <DataGridTextColumn x:Name="precoDeVendaColumn" Binding="{Binding PrecoDeVenda, Mode=OneWay, StringFormat={}{0:n2}}" Header="PV (R$)" Width="72" CellStyle="{StaticResource RightStyle}"/>
                                <DataGridTextColumn x:Name="PrecoDeVendaDesejadoColumn" Binding="{Binding PrecoDeVendaDesejado, StringFormat={}{0:n2}}" Header="PVD (R$)" Width="72" CellStyle="{StaticResource RightStyle}"/>
                                <!--<DataGridTextColumn x:Name="stateColumn1" Binding="{Binding State}" Header="State" IsReadOnly="True" Width="Auto"/>-->
                            </DataGrid.Columns>
                        </DataGrid>
                    </Grid>
                </GroupBox>
            </Grid>
        </Grid>
        <StatusBar Grid.Row="3" VerticalAlignment="Bottom" Grid.ColumnSpan="2">
            <Label x:Name="statusBarLabel" Content="Pronto."/>
        </StatusBar>
    </Grid>
</Window>
