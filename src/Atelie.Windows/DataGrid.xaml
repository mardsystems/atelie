<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Atelie"
>
    <Style TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="MinWidth" Value="30"/>
        <!--<Setter Property="Background" Value="Red"/>-->
        <!--<Setter Property="BorderBrush" Value="#FFD4D4D4"/>-->
        <!--<Setter Property="BorderThickness" Value="0,0,0,1"/>-->
    </Style>
    <Style TargetType="DataGridRow">
        <Setter Property="MinHeight" Value="20"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <!--<Setter Property="Background" Value="Black" />-->
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <!--<Setter Property="Background" Value="Yellow" />-->
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="SelectionStyle" TargetType="{x:Type DataGridCell}">
        <!--<Setter Property="OverridesDefaultStyle" Value="True"/>-->
        <!--<Setter Property="Background" Value="Red"/>-->
        <Setter Property="BorderBrush" Value="#FFD4D4D4"/>
        <Setter Property="BorderThickness" Value="0,0,1,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border x:Name="borderCell" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <Grid>
                            <Rectangle x:Name="selectedCellVisual" Fill="#33000000" Visibility="Collapsed"/>
                            <Border Padding="0,4,0,2">
                                <!--<TextBlock Text="R$" HorizontalAlignment="Left"/>-->
                                <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Border>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="selectedCellVisual" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="borderCell" Property="BorderBrush" Value="#33000000"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RightStyle" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource SelectionStyle}">
        <Setter Property="TextBlock.TextAlignment" Value="Right" />
    </Style>
    <!--When the cell is selected, switching to transparent to let the row's Background be visible-->
    <Style TargetType="DataGridCell" BasedOn="{StaticResource SelectionStyle}">
        <!--<Style.Triggers>
            -->
        <!--<Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="Transparent" />
            </Trigger>-->
        <!--

            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="#FF4472C4"/>
                -->
        <!--<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>-->
        <!--<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>-->
        <!--
            </Trigger>

            -->
        <!--<Trigger Property="IsKeyboardFocusWithin" Value="True">

                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}"/>
                <Setter Property="BorderThickness" Value="2"/>

            </Trigger>-->
        <!--
        </Style.Triggers-->
    </Style>
    <!--<Style x:Key="RightAlignStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="Padding" Value="5,0"/>
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>
    <Style x:Key="LeftAlignStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="TextAlignment" Value="Left" />
        <Setter Property="Padding" Value="5,0"/>
        <Setter Property="VerticalAlignment" Value="Center" />
    </Style>-->
    <Style TargetType="{x:Type DataGrid}">
        <Setter Property="AlternatingRowBackground" Value="#FFD9E1F2" />
        <Setter Property="HorizontalGridLinesBrush" Value="#FF8EA9DB" />
        <Setter Property="VerticalGridLinesBrush" Value="#FFD4D4D4" />
        <Setter Property="GridLinesVisibility" Value="Horizontal" />
        <Setter Property="FontFamily" Value="Calibri"/>
        <Setter Property="FontSize" Value="10.5pt"/>
        <Setter Property="CanUserResizeRows" Value="False"/>
    </Style>
    <Style TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="FontWeight"  Value="Bold" />
        <Setter Property="Background" Value="#FF4472C4" />
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="MinHeight" Value="20"/>
        <Setter Property="Padding" Value="2,0,0,0"/>
    </Style>
    <Style TargetType="{x:Type Menu}">
        <Setter Property="FontFamily" Value="Sergoe UI"/>
        <Setter Property="FontSize" Value="10pt"/>
    </Style>
    <!--<SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent" />
            <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent" />-->
    <Style x:Key="cellStyle" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource {x:Type DataGridCell}}">
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <StackPanel>
                        <AdornedElementPlaceholder x:Name="placeholder" />
                        <Popup HorizontalAlignment="Left" PopupAnimation="Fade" Placement="Bottom" IsOpen="true">
                            <Grid Background="White">
                                <TextBlock Text="{Binding [0].ErrorContent}"/>
                            </Grid>
                        </Popup>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="errorStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <StackPanel>
                        <AdornedElementPlaceholder x:Name="placeholder" />
                        <Popup HorizontalAlignment="Left" PopupAnimation="Fade" Placement="Bottom" IsOpen="true">
                            <Grid Background="White">
                                <TextBlock Text="{Binding [0].ErrorContent}"/>
                            </Grid>
                        </Popup>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--<Setter Property="Padding" Value="-2"/>
                <Style.Triggers>
                    <Trigger Property="Validation.HasError" Value="True">
                        <Setter Property="Background" Value="Red"/>
                        <Setter Property="ToolTip" 
                            Value="{Binding RelativeSource={RelativeSource Self},
                            Path=(Validation.Errors)[0].ErrorContent.Message}"/>
                    </Trigger>
                </Style.Triggers>-->
    </Style>
    <Style x:Key="error2Style" TargetType="{x:Type Label}">
        <Setter Property="Padding" Value="-2"/>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="Background" Value="Red"/>
                <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <ControlTemplate x:Key="rowValidationErrorTemplate">
        <Grid Margin="0,-2,0,-2" ToolTip="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type DataGridRow}}, Path=(Validation.Errors)[0].ErrorContent}">
            <Ellipse StrokeThickness="0" Fill="Red" Width="{TemplateBinding FontSize}" Height="{TemplateBinding FontSize}" />
            <TextBlock Text="!" FontSize="{TemplateBinding FontSize}" FontWeight="Bold" Foreground="White" HorizontalAlignment="Center" />
        </Grid>
    </ControlTemplate>
</ResourceDictionary>