<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Atelie">
    <!--<SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="Transparent" />
            <SolidColorBrush x:Key="{x:Static SystemColors.ControlBrushKey}" Color="Transparent" />-->
    <Style x:Key="cellStyle" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource {x:Type DataGridCell}}">
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <StackPanel>
                        <AdornedElementPlaceholder x:Name="placeholder" />
                        <Popup HorizontalAlignment="Left" PopupAnimation="Fade" Placement="Bottom" IsOpen="true">
                            <Grid Background="White">
                                <TextBlock Text="{Binding [0].ErrorContent}"/>
                            </Grid>
                        </Popup>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="errorStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Validation.ErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <StackPanel>
                        <AdornedElementPlaceholder x:Name="placeholder" />
                        <Popup HorizontalAlignment="Left" PopupAnimation="Fade" Placement="Bottom" IsOpen="true">
                            <Grid Background="White">
                                <TextBlock Text="{Binding [0].ErrorContent}"/>
                            </Grid>
                        </Popup>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--<Setter Property="Padding" Value="-2"/>
                <Style.Triggers>
                    <Trigger Property="Validation.HasError" Value="True">
                        <Setter Property="Background" Value="Red"/>
                        <Setter Property="ToolTip" 
                            Value="{Binding RelativeSource={RelativeSource Self},
                            Path=(Validation.Errors)[0].ErrorContent.Message}"/>
                    </Trigger>
                </Style.Triggers>-->
    </Style>
    <Style x:Key="error2Style" TargetType="{x:Type Label}">
        <Setter Property="Padding" Value="-2"/>
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="True">
                <Setter Property="Background" Value="Red"/>
                <Setter Property="ToolTip" 
                            Value="{Binding RelativeSource={RelativeSource Self},
                            Path=(Validation.Errors)[0].ErrorContent}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--<Style TargetType="DataGridRow">
        <Style.Triggers>
            --><!--Order of these triggers matter as the last one will take precedence--><!--
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="Black" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Yellow" />
            </Trigger>
        </Style.Triggers>
    </Style>-->
    <!--When the cell is selected, switching to transparent to let the row's Background be visible-->
    <!--<Style TargetType="DataGridCell" BasedOn="{StaticResource {x:Type DataGridCell}}">
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="Transparent" />
            </Trigger>
            --><!--<Trigger Property="IsSelected" Value="True">
                                <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>--><!--
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                --><!--<Setter Property="BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}"/>-->
                <!--<Setter Property="BorderThickness" Value="1"/>--><!--
            </Trigger>
        </Style.Triggers>
    </Style>-->
    <Style TargetType="{x:Type DataGrid}">
        <Setter Property="AlternatingRowBackground" Value="#FFD9E1F2" />
        <Setter Property="HorizontalGridLinesBrush" Value="#FF8EA9DB" />
        <Setter Property="VerticalGridLinesBrush" Value="#FFD4D4D4" />
    </Style>
    <Style TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="FontWeight"  Value="Bold" />
        <Setter Property="Background" Value="#FF4472C4" />
        <Setter Property="Foreground" Value="White"/>
    </Style>
    <ControlTemplate x:Key="rowValidationErrorTemplate">
        <Grid Margin="0,-2,0,-2"
                            ToolTip="{Binding RelativeSource={RelativeSource
                                FindAncestor, AncestorType={x:Type DataGridRow}},
                                Path=(Validation.Errors)[0].ErrorContent}">
            <Ellipse StrokeThickness="0" Fill="Red" 
                                Width="{TemplateBinding FontSize}" 
                                Height="{TemplateBinding FontSize}" />
            <TextBlock Text="!" FontSize="{TemplateBinding FontSize}" 
                                FontWeight="Bold" Foreground="White" 
                                HorizontalAlignment="Center" />
        </Grid>
    </ControlTemplate>
    <SolidColorBrush x:Key="alternatingRowBackground" Color="#FFD9E1F2" Opacity="0.5"/>
    <!--HorizontalGridLinesBrush="#FF8EA9DB" VerticalGridLinesBrush="#FFD4D4D4"-->
    <!--materialDesign:DataGridAssist.CellPadding="1 1 1 1"-->
</ResourceDictionary>